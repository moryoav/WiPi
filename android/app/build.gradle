apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

//
// ─── AVOID BOUNCY-CASTLE DUPLICATES ───────────────────────────────────────────
// Drop the newer bcprov-jdk15to18 artifact entirely and force the JSch one:
configurations.all {
    // exclude the conflicting module
    exclude group: 'org.bouncycastle', module: 'bcprov-jdk15to18'

    resolutionStrategy {
        // force a single version of bcprov for everything
        force 'org.bouncycastle:bcprov-jdk15on:1.70'
    }
}
// ──────────────────────────────────────────────────────────────────────────────

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file([ 
      "node", "-e", 
      "require('expo/scripts/resolveAppEntry')", 
      projectRoot, "android", "absolute" 
    ].execute(null, rootDir).text.trim())
    reactNativeDir = new File([
      "node", "--print", 
      "require.resolve('react-native/package.json')"
    ].execute(null, rootDir).text.trim())
      .getParentFile().getAbsoluteFile()
    hermesCommand = new File([
      "node", "--print", 
      "require.resolve('react-native/package.json')"
    ].execute(null, rootDir).text.trim())
      .getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File([
      "node", "--print", 
      "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"
    ].execute(null, rootDir).text.trim())
      .getParentFile().getAbsoluteFile()

    cliFile = new File([
      "node", "--print", 
      "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"
    ].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.moryoav.wificonnectapp'
    defaultConfig {
        applicationId 'com.moryoav.wificonnectapp'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply any custom packagingOptions from gradle.properties
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def opts = (findProperty("android.packagingOptions.$prop") ?: "").split(",")*.trim() - ""
    if (opts) {
        println "android.packagingOptions.$prop += $opts"
        opts.each { android.packagingOptions[prop] += it }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    def isGifEnabled             = (findProperty('expo.gif.enabled')         ?: "") == "true"
    def isWebpEnabled            = (findProperty('expo.webp.enabled')        ?: "") == "true"
    def isWebpAnimatedEnabled    = (findProperty('expo.webp.animated')       ?: "") == "true"

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }
    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
